<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.example</groupId>
    <artifactId>demo_ws</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>demo_ws</name>
    <packaging>war</packaging>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.target>11</maven.compiler.target>
        <maven.compiler.source>11</maven.compiler.source>
        <junit.version>5.8.2</junit.version>
        <swagger.version>2.2.0</swagger.version>

        <!-- For custom image name and tag. Leave this empty to use artifactId and name as sources for the image. -->
        <docker.image.name></docker.image.name>
        <docker.image.tag></docker.image.tag>

        <license.licenseName>mit</license.licenseName>
    </properties>

    <developers>
        <developer>
            <id>tryptichon</id>
            <name>Wolfgang Hübner</name>
            <email>duke01@gmx.net</email>
            <roles>
                <role>Developer</role>
            </roles>
            <timezone>Europe/Berlin</timezone>
        </developer>
    </developers>

    <organization>
        <name>Wolfgang Hübner</name>
    </organization>

    <inceptionYear>2022</inceptionYear>


    <licenses>
        <license>
            <name>MIT License</name>
            <url>https://opensource.org/licenses/MIT</url>
            <distribution>repo</distribution>
        </license>
    </licenses>

    <dependencies>

        <dependency>
            <groupId>jakarta.servlet</groupId>
            <artifactId>jakarta.servlet-api</artifactId>
            <version>5.0.0</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.containers</groupId>
            <artifactId>jersey-container-servlet</artifactId>
            <version>3.0.4</version>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.inject</groupId>
            <artifactId>jersey-hk2</artifactId>
            <version>3.0.4</version>
        </dependency>

        <!--        <dependency>-->
        <!--            <groupId>jakarta.json.bind</groupId>-->
        <!--            <artifactId>jakarta.json.bind-api</artifactId>-->
        <!--            <version>2.0.0</version>-->
        <!--            <scope>provided</scope>-->
        <!--        </dependency>-->
        <!--        <dependency>-->
        <!--            <groupId>jakarta.json</groupId>-->
        <!--            <artifactId>jakarta.json-api</artifactId>-->
        <!--            <version>2.0.1</version>-->
        <!--            <scope>provided</scope>-->
        <!--        </dependency>-->
        <!--        <dependency>-->
        <!--            <groupId>org.glassfish.jersey.media</groupId>-->
        <!--            <artifactId>jersey-media-json-jackson</artifactId>-->
        <!--            <version>3.0.4</version>-->
        <!--        </dependency>-->

        <dependency>
            <groupId>io.swagger.core.v3</groupId>
            <artifactId>swagger-jaxrs2-jakarta</artifactId>
            <version>${swagger.version}</version>
        </dependency>
        <dependency>
            <groupId>io.swagger.core.v3</groupId>
            <artifactId>swagger-jaxrs2-servlet-initializer-v2-jakarta</artifactId>
            <version>${swagger.version}</version>
        </dependency>

        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>3.3.2</version>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>license-maven-plugin</artifactId>
                <version>2.0.0</version>
                <executions>
                    <execution>
                        <id>update license</id>
                        <goals>
                            <goal>update-project-license</goal>
                            <goal>add-third-party</goal>
                        </goals>
                        <phase>process-sources</phase>
                        <configuration>
                            <licenseName>mit</licenseName>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

        </plugins>
    </build>

    <!-- Building a docker image when `-Ddocker=true` is defined with mvn.
         Example: mvn package -Ddocker=true
     -->
    <profiles>
        <profile>
            <id>docker</id>
            <activation>
                <property>
                    <name>docker</name>
                    <value>true</value>
                </property>
            </activation>
            <properties>
                <!-- For custom image name and tag. Leave this empty to use artifactId and name as sources for the image. -->
                <docker.image.name></docker.image.name>
                <docker.image.tag></docker.image.tag>
            </properties>
            <build>
                <plugins>
                    <!--
                      This plugin is used - in a somewhat awkward way - to create a compatible name and tag for a docker
                      image from the project.artifactId and project.version and store it in a property called docker.image.
                    -->
                    <plugin>
                        <groupId>org.codehaus.gmavenplus</groupId>
                        <artifactId>gmavenplus-plugin</artifactId>
                        <version>1.13.1</version>
                        <executions>
                            <execution>
                                <id>Generate vars on build</id>
                                <phase>generate-sources</phase>
                                <goals>
                                    <goal>execute</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>Generate vars on clean</id>
                                <phase>clean</phase>
                                <goals>
                                    <goal>execute</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <scripts>
                                <script>
                                    <![CDATA[
String docker_image_name = "${docker.image.name}" ?: "${project.artifactId}".toLowerCase()

String docker_image_tag = "${docker.image.tag}" ?:
        ("${project.version}".endsWith('-SNAPSHOT') ?
                "t${project.version}".replace('-SNAPSHOT', '') :
                "v${project.version}")

project.properties.setProperty('docker.image', "${docker_image_name}:${docker_image_tag}")

// println("Calculated docker image ${project.properties.getProperty('docker.image')}")
                            ]]>
                                </script>
                            </scripts>
                        </configuration>
                        <dependencies>
                            <dependency>
                                <groupId>org.codehaus.groovy</groupId>
                                <artifactId>groovy</artifactId>
                                <!-- any version of Groovy \>= 1.5.0 should work here -->
                                <version>3.0.10</version>
                                <scope>runtime</scope>
                            </dependency>
                            <dependency>
                                <groupId>org.codehaus.groovy</groupId>
                                <artifactId>groovy-ant</artifactId>
                                <version>3.0.10</version>
                                <scope>runtime</scope>
                            </dependency>
                        </dependencies>
                    </plugin>

                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <version>1.6.0</version>
                        <executions>
                            <!-- Remove existing image from local repo -->
                            <execution>
                                <id>docker-clean</id>
                                <phase>clean</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>docker</executable>
                                    <workingDirectory>${project.basedir}</workingDirectory>
                                    <arguments>
                                        <argument>rmi</argument>
                                        <argument>-f</argument>
                                        <argument>${project.groupId}/${docker.image}</argument>
                                    </arguments>
                                </configuration>
                            </execution>

                            <!-- Remove existing image from local repo -->
                            <execution>
                                <id>docker-remove-old</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>docker</executable>
                                    <workingDirectory>${project.basedir}</workingDirectory>
                                    <arguments>
                                        <argument>rmi</argument>
                                        <argument>-f</argument>
                                        <argument>${project.groupId}/${docker.image}</argument>
                                    </arguments>
                                </configuration>
                            </execution>

                            <!--
                              Create new docker image using Dockerfile which must be present in current working directory.
                              Name the image using maven project information using ${docker.image} (see gmaven-plugin above).
                            -->
                            <execution>
                                <id>docker-build</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>docker</executable>
                                    <workingDirectory>${project.basedir}</workingDirectory>
                                    <arguments>
                                        <argument>build</argument>
                                        <argument>--build-arg</argument>
                                        <argument>PROJECT_SOURCE_DIR=${project.artifactId}-${project.version}</argument>
                                        <argument>-t</argument>
                                        <argument>${project.groupId}/${docker.image}</argument>
                                        <argument>.</argument>
                                    </arguments>
                                </configuration>
                            </execution>

                            <!-- Example of "Login and Push the image to a docker repo." -->
                            <!--                    <execution>-->
                            <!--                        <id>docker-login</id>-->
                            <!--                        <phase>deploy</phase>-->
                            <!--                        <goals>-->
                            <!--                            <goal>exec</goal>-->
                            <!--                        </goals>-->
                            <!--                        <configuration>-->
                            <!--                            <executable>docker</executable>-->
                            <!--                            <workingDirectory>${project.basedir}</workingDirectory>-->
                            <!--                            <arguments>-->
                            <!--                                <argument>login</argument>-->
                            <!--                                <argument>-u</argument>-->
                            <!--                                <argument>${docker.user}</argument>-->
                            <!--                                <argument>-p</argument>-->
                            <!--                                <argument>${docker.password}</argument>-->
                            <!--                                <argument>${docker.url}</argument>-->
                            <!--                            </arguments>-->
                            <!--                        </configuration>-->
                            <!--                    </execution>-->
                            <!--                    <execution>-->
                            <!--                        <id>docker-push</id>-->
                            <!--                        <phase>deploy</phase>-->
                            <!--                        <goals>-->
                            <!--                            <goal>exec</goal>-->
                            <!--                        </goals>-->
                            <!--                        <configuration>-->
                            <!--                            <executable>docker</executable>-->
                            <!--                            <workingDirectory>${project.basedir}</workingDirectory>-->
                            <!--                            <arguments>-->
                            <!--                                <argument>push</argument>-->
                            <!--                                <argument>${project.groupId}/${project.artifactId}:${project.version}</argument>-->
                            <!--                            </arguments>-->
                            <!--                        </configuration>-->
                            <!--                    </execution>-->
                        </executions>
                    </plugin>

                </plugins>
            </build>
        </profile>
    </profiles>

</project>